//+++++++++++++Spazi e costanti++++++++++++++++

B:= VectorSpace(GF(2),8);
W:= VectorSpace(GF(2),32);  
L:= VectorSpace(GF(2),64);  
Q:= VectorSpace(GF(2),128);
E:= GF(2);

IdentityB := [];
IdentityW := [];
IdentityL := [];
IdentityQ := [];

for i in [1..8] do
    IdentityB[i] := 1;
end for;

for i in [1..32] do
    IdentityW[i] := 1;
end for;

for i in [1..64] do
    IdentityL[i] := 1;
end for;

for i in [1..128] do
    IdentityQ[i] := 1;
end for;

function GetIdentityVector(vLen)
    case vLen:
        when 8:
            I := B!IdentityB;
        when 32:
            I := W!IdentityW;
        when 64:
            I := L!IdentityL;
        when 128:
            I := Q!IdentityQ;
    end case;

    return I;
end function;

//+++++++++++++Utilities++++++++++++++++

/**
 * restituisce una sequenza
 * a e b sono vettori di uno spazio
*/
function VectorwiseOr(a,b)
    result := [];
    
    nA := #Eltseq(a);
    I := GetIdentityVector(nA);
    
    notA := a + I;
    notB := b + I;

    result := (notA*notB) + I;

    return result;
end function;

/**
 * restituisce una sequenza
 * a e b sono vettori di uno spazio
*/
function VectorwiseAnd(a,b)
    return a*b;
end function;

/**
 * shift a sinistra
 * v è un vettore di uno degli spazi che utilizziamo
 * restituisce una sequenza che andrà castata sullo spazio corretto
*/
function LeftShift(v) 
    nElement := #Eltseq(v);
    vShifted := Eltseq(v);

    for i in [1..(nElement-1)] do
        vShifted[i] := v[i+1];
    end for;

    vShifted[nElement] := v[1];

    return vShifted;
end function;

/**
 * shift a destra
 * v è una sequenza che andrà castata sullo spazio corretto
 * restituisce una sequenza che andrà castata sullo spazio corretto
*/
function RightShift(v) 
    nElement := #Eltseq(v);
    vShifted := Eltseq(v);

    for i in [1..(nElement-1)] do
        vShifted[i+1] := v[i];
    end for;

    vShifted[1] := v[nElement];

    return vShifted;    
end function;

procedure Fill8Bit(~v)
    if #v ne 8 then
        for i in [1..(8-(#v))] do
            v:=[0] cat v;
        end for;
    end if;
end procedure; 

procedure Fill128Bit(~key)
    if #key ne 128 then
        for i in [1..(128-(#key))] do
            key:=[0] cat key;
        end for;
    end if;
end procedure; 

procedure Fill192Bit(~key)
    if #key ne 192 then
        for i in [1..(192-(#key))] do
            key:=[0] cat key;
        end for;
    end if;
end procedure; 

procedure Fill256Bit(~key)
    if #key ne 256 then
        for i in [1..(256-(#key))] do
            key:=[0] cat key;
        end for;
    end if;
end procedure; 

function SequenceToIntCoeff(a)
	c := [];
	for i in [1..#a] do
		if a[i] eq 0 then
			c[i] := 0;
		else
			c[i] := 1;
		end if;
	end for;

	return c;
end function;

function ConvertBinInt(s) //si prende in input una sequenza, a sinistra la più significativa
	a:=0;
	b := SequenceToIntCoeff(s);
	n:=#s;
	for i in [1..n] do
		a:=2^(n-i)*b[i]+a; 
	end for;
	
	return a;
end function;

//+++++++++++++S-BOX++++++++++++++++

function s1(a) // a è un elemento di B

	s:=[112,130,44,236,179,39,192,229,228,133,87,53,234,12,174,65,35,239,107,147,69,25,165,33,237,14,79,78,29,101,146,189,134
	,184,175,143,124,235,31,206,62,48,220,95,94,197,11,26,166,225,57,202,213,71,93,61,217,1,90,214,81,86,108,77,139,13,154,102
	,251,204,176,45,116,18,43,32,240,177,132,153,223,76,203,194,52,126,118,5,109,183,169,49,209,23,4,215,20,88,58,97,222,27,17,28
	,50,15,156,22,83,24,242,34,254,68,207,178,195,181,122,145,36,8,232,168,96,252,105,80,170,208,160,125,161,137,98,151,84,91,30,149
	,224,255,100,210,16,196,0,72,163,247,117,219,138,3,230,218,9,63,221,148,135,92,131,2,205,74,144,51,115,103,246,243,157,127,191
	,226,82,155,216,38,200,55,198,59,129,150,111,75,19,190,99,46,233,121,167,140,159,110,188,142,41,245,249,182,47,253,180,89,120,152
	,6,106,231,70,113,186,212,37,171,66,136,162,141,250,114,7,185,85,248,238,172,10,54,73,42,104,60,56,241,164,64,40,211,123,187
	,201,67,193,21,227,173,244,119,199,128,158];

	n:=ConvertBinInt(Eltseq(a));
	sValue := s[n+1];

	result := Reverse(Intseq(sValue,2));
	Fill8Bit(~result);

	return B!result;
end function;

function s2(a)

	s:=[224,5,88,217,103,78,129,203,201,11,174,106,213,24,93,130,70,223,214,39,138,50,75,66,219,28,158,156,58,202,37,123,13,113
	,95,31,248,215,62,157,124,96,185,190,188,139,22,52,77,195,114,149,171,142,186,122,179,2,180,173,162,172,216,154,23,26,53,204
	,247,153,97,90,232,36,86,64,225,99,9,51,191,152,151,133,104,252,236,10,218,111,83,98,163,46,8,175,40,176,116,194,189,54,34
	,56,100,30,57,44,166,48,229,68,253,136,159,101,135,107,244,35,72,16,209,81,192,249,210,160,85,161,65,250,67,19,196,47,168,182
	,60,43,193,255,200,165,32,137,0,144,71,239,234,183,21,6,205,181,18,126,187,41,15,184,7,4,155,148,33,102,230,206,237,231,59,254,127
	,197,164,55,177,76,145,110,141,118,3,45,222,150,38,125,198,92,211,242,79,25,63,220,121,29,82,235,243,109,94,251,105,178,240
	,49,12,212,207,140,226,117,169,74,87,132,17,69,27,245,228,14,115,170,241,221,89,20,108,146,84,208,120,112,227,73,128,80,167
	,246,119,147,134,131,42,199,91,233,238,143,1,61];

	n:=ConvertBinInt(Eltseq(a));
	sValue := s[n+1];

	result := Reverse(Intseq(sValue,2));
	Fill8Bit(~result);

	return B!result;
end function;

function s3(a)
	s:=[56,65,22,118,217,147,96,242,114,194,171,154,117,6,87,160,
		145,247,181,201,162,140,210,144,246,7,167,39,142,178,73,222,
		67,92,215,199,62,245,143,103,31,24,110,175,47,226,133,13,
		83,240,156,101,234,163,174,158,236,128,45,107,168,43,54,166,
		197,134,77,51,253,102,88,150,58,9,149,16,120,216,66,204,
		239,38,229,97,26,63,59,130,182,219,212,152,232,139,2,235,
		10,44,29,176,111,141,136,14,25,135,78,11,169,12,121,17,
		127,34,231,89,225,218,61,200,18,4,116,84,48,126,180,40,
		85,104,80,190,208,196,49,203,42,173,15,202,112,255,50,105,
		8,98,0,36,209,251,186,237,69,129,115,109,132,159,238,74,
		195,46,193,1,230,37,72,153,185,179,123,249,206,191,223,113,
		41,205,108,19,100,155,99,157,192,75,183,165,137,95,177,23,
		244,188,211,70,207,55,94,71,148,250,252,91,151,254,90,172,
		60,76,3,53,243,35,184,93,106,146,213,33,68,81,198,125,
		57,131,220,170,124,119,86,5,27,164,21,52,30,28,248,82,
		32,20,233,189,221,228,161,224,138,241,214,122,187,227,64,79];

	n:=ConvertBinInt(Eltseq(a));
	sValue := s[n+1];

	result := Reverse(Intseq(sValue,2));
	Fill8Bit(~result);

	return B!result;
end function;

function s4(a)
	s:=[112,44,179,192,228,87,234,174,35,107,69,165,237,79,29,146,
		134,175,124,31,62,220,94,11,166,57,213,93,217,90,81,108,
		139,154,251,176,116,43,240,132,223,203,52,118,109,169,209,4,
		20,58,222,17,50,156,83,242,254,207,195,122,36,232,96,105,
		170,160,161,98,84,30,224,100,16,0,163,117,138,230,9,221,
		135,131,205,144,115,246,157,191,82,216,200,198,129,111,19,99,
		233,167,159,188,41,249,47,180,120,6,231,113,212,171,136,141,
		114,185,248,172,54,42,60,241,64,211,187,67,21,173,119,128,
		130,236,39,229,133,53,12,65,239,147,25,33,14,78,101,189,
		184,143,235,206,48,95,197,26,225,202,71,61,1,214,86,77,
		13,102,204,45,18,32,177,153,76,194,126,5,183,49,23,215,
		88,97,27,28,15,22,24,34,68,178,181,145,8,168,252,80,
		208,125,137,151,91,149,255,210,196,72,247,219,3,218,63,148,
		92,2,74,51,103,243,127,226,155,38,55,59,150,75,190,46,
		121,140,110,142,245,182,253,89,152,106,70,186,37,66,162,250,
		7,85,238,10,73,104,56,164,40,123,201,193,227,244,199,158];

	n:=ConvertBinInt(Eltseq(a));
	sValue := s[n+1];

	result := Reverse(Intseq(sValue,2));
	Fill8Bit(~result);

	return B!result;
end function;

//++++++++++++++++++++++++++++S-FUNCTION++++++++++++++++++++++++

function S(a)   //a è un elemento di L -> 64 bit    
    matrix := [];
    vectMtx := [];
    result := [];

    for i in [0..7] do
        matrix := Append(matrix, Eltseq(a)[(8*i +1) .. 8*(i+1)]);
    end for;

    vectMtx[1] := s1(B!matrix[1]);
    vectMtx[2] := s2(B!matrix[2]);
    vectMtx[3] := s3(B!matrix[3]);
    vectMtx[4] := s4(B!matrix[4]);
    vectMtx[5] := s2(B!matrix[5]);
    vectMtx[6] := s3(B!matrix[6]);
    vectMtx[7] := s4(B!matrix[7]);
    vectMtx[8] := s1(B!matrix[8]);

    for i in [1..8] do
        result := result cat Eltseq(vectMtx[i]);    
    end for;

    return L!result;
end function;


//++++++++++++++++++++++++++++P-FUNCTION++++++++++++++++++++++++

/**
 * Restituisce un elemento di L
 * z è un vettore di L
*/
function P(z)
    zSeq := Eltseq(z);
    
    z1 :=  B!(zSeq[1..8]);
    z2 :=  B!(zSeq[9..16]);
    z3 :=  B!(zSeq[17..24]);
    z4 :=  B!(zSeq[25..32]);
    z5 :=  B!(zSeq[33..40]);
    z6 :=  B!(zSeq[41..48]);
    z7 :=  B!(zSeq[49..56]);
    z8 :=  B!(zSeq[57..64]);

    y1 :=  Eltseq(z1 +z3 +z4 +z6 +z7 +z8);
    y2 :=  Eltseq(z1 +z2 +z4 +z5 +z7 +z8);
    y3 :=  Eltseq(z1 +z2 +z3 +z5 +z6 +z8);
    y4 :=  Eltseq(z2 +z3 +z4 +z5 +z6 +z7);
    y5 :=  Eltseq(z1 +z2 +z6 +z7 +z8);
    y6 :=  Eltseq(z2 +z3 +z5 +z7 +z8);
    y7 :=  Eltseq(z3 +z4 +z5 +z6 +z8);
    y8 :=  Eltseq(z1 +z4 +z5 +z6 +z7);

    Y := y1 cat y2 cat y3 cat y4 cat y5 cat y6 cat y7 cat y8;
    
    return L!Y;
end function;

//++++++++++++++++++++++++++++FL-FUNCTION+++++++++++++++++++++++++

/**
 * Restituisce un vettore di L
 * X,k  sono elementi di L 
*/
function FL(X,k)
    Xl := W!(Eltseq(X)[1..32]); 
    Xr := W!(Eltseq(X)[33..64]);

    klL := W!(Eltseq(k)[1..32]); 
    klR := W!(Eltseq(k)[33..64]);

    Yr := W!(LeftShift(Eltseq(VectorwiseAnd(Xl,klL)))) + Xr;
    Yl := VectorwiseOr(Yr,klR) + Xl;

    Y := L!(Eltseq(Yl) cat Eltseq(Yr));
    return Y;
end function;

//++++++++++++++++++++++++++++FL1-FUNCTION++++++++++++++++++++++++


/**
 * Restituisce un vettore di L
 * Y,k  sono elementi di L 
*/
function FL_1(Y,k) 

    Yl := W!(Eltseq(Y)[1..32]); 
    Yr := W!(Eltseq(Y)[33..64]);

    klL := W!(Eltseq(k)[1..32]); 
    klR := W!(Eltseq(k)[33..64]);

    Xl := VectorwiseOr(Yr, klR) + Yl;
    Xr := W!(LeftShift(VectorwiseAnd(Xl, klL))) + Yr;

    X := L!(Eltseq(Xl) cat Eltseq(Xr));

    return X;
end function;


//++++++++++++++++++++++++++++F-FUNCTION++++++++++++++++++++++++++

/**
 * Restituisce un elemento di L
 * X,k sono vettori di L
*/
function F(X,k)
    Y := P(S(X + k));

    return L!Y;
end function;


//++++++++++++++++++++++++++KEY SCHEDULE++++++++++++++++++++++++++

S1:=Reverse(Intseq(0xA09E667F3BCC908B,2));
if #S1 ne 64 then
	for i in [1..(64-(#S1))] do
		S1:=[0] cat S1;
	end for;
end if;

S2:=Reverse(Intseq(0xB67AE8584CAA73B2,2));
if #S2 ne 64 then
	for i in [1..(64-(#S2))] do
		S2:=[0] cat S2;
	end for;
end if;

S3:=Reverse(Intseq(0xC6EF372FE94F82BE,2));
if #S3 ne 64 then
	for i in [1..(64-(#S3))] do
		S3:=[0] cat S3;
	end for;
end if;

S4:=Reverse(Intseq(0x54FF53A5F1D36F1C,2));
if #S4 ne 64 then
	for i in [1..(64-(#S4))] do
		S4:=[0] cat S4;
	end for;
end if;

S5:=Reverse(Intseq(0x10E527FADE682D1D,2));
if #S5 ne 64 then
	for i in [1..(64-(#S5))] do
		S5:=[0] cat S5;
	end for;
end if;

S6:=Reverse(Intseq(0xB05688C2B3E6C1FD,2));
if #S6 ne 64 then
	for i in [1..(64-(#S6))] do
		S6:=[0] cat S6;
	end for;
end if;

/**
 * Ritorna una sequenza
 *K è la sequenza di 128 bit con la cifra più significativa a sinistra(128 bit)
 *pe analogia in quanto negli altri key schedule le lunghezze non stanno in spazi vettoriali quindi siam costretti a usare sequenze
*/
function KeyScheduleA(K); 
	//PRIMO BLOCCO
	KL:=Q!K;
	KR:=Q!0;
	K:=(KL+KR);
	KL0:=L!(Eltseq(K)[1..64]);
	KR0:=L!(Eltseq(K)[65..128]);
	KR1:=KL0;
	KL1:=F(KL0,L!S1)+KR0;
	KR2:=KL1;
	KL2:=F(KL1,L!S2)+KR1;

	K:=Q!(Eltseq(KL2) cat Eltseq(KR2))+KL;

	//SECONDO BLOCCO vedi disegno
	KL0:=L!(Eltseq(K)[1..64]);
	KR0:=L!(Eltseq(K)[65..128]);
	KR1:=KL0;
	KL1:=F(KL0,L!S3)+KR0;
	KR2:=KL1;
	KL2:=F(KL1,L!S4)+KR1;

	KA:=Q!(Eltseq(KL2) cat Eltseq(KR2));

	KA := Eltseq(KA);
	KL := Eltseq(KL);

	return KA, KL;
end function;

//K è la sequenza di 128 bit con la cifra più significativa a sinistra(128 bit)
//pe analogia in quanto negli altri key schedule le lunghezze non stanno in spazi vettoriali quindi siam costretti a usare sequenze
/**
 * Ritorna una sequenza
 * funzione che genera le chiavi di supporto per input 192 o 256 bit
*/
function KeyScheduleAB(K) 
 	KL:=Q!(K[1..128]); //KL (in 128 bit) è data sempre dai primi 128 bit della chiave

 	if #K eq 192 then   		// genero la parte destra della chiave primitiva:
	 	
		I := GetIdentityVector(64);
 		//R1:=L![1: i in [1..64]];	
		RL:=K[129..192];				// la parte destra è semplicemente la parte in bit che non ho utilizzato della chiave K
 		RR:=Eltseq(L!K[129..192]+I);	// la parte sinistra è la sequenza in bit complementare alla parte destra di KL			
 		KR:=Q!(RL cat RR);
 	else
 		KR:= Q!(K[129..256]); // essendo qua la lunghezza esattamente doppia della chiave a 128 bit KR è esattamente la parte destra di K
 	end if;


	//PRIMO BLOCCO
	K:=(KL+KR);
	KL0:=L!(Eltseq(K)[1..64]);
	KR0:=L!(Eltseq(K)[65..128]);
	KR1:=KL0;
	KL1:=F(KL0,L!S1)+KR0;
	KR2:=KL1;
	KL2:=F(KL1,L!S2)+KR1;

	K:=Q!(Eltseq(KL2) cat Eltseq(KR2))+KL;

	//SECONDO BLOCCO vedi disegno
	KL0:=L!(Eltseq(K)[1..64]);
	KR0:=L!(Eltseq(K)[65..128]);
	KR1:=KL0;
	KL1:=F(KL0,L!S3)+KR0;
	KR2:=KL1;
	KL2:=F(KL1,L!S4)+KR1;

	KA:=Q!(Eltseq(KL2) cat Eltseq(KR2));

	KA := Eltseq(KA);
	KL := Eltseq(KL);

	//------------------------------------------------------------------
	
 	K:=Eltseq(Q!KA+KR);
	KL3:=L!(K[1..64]);
 	KR3:=L!(K[65..128]);
 	KR4:=KL3;
 	KL4:=F(KL3,L!S5)+KR3;
 	KR5:=KL4;
 	KL5:=F(KL4,L!S6)+KR4;
 	KB:=Q!(Eltseq(KL5) cat Eltseq(KR5));
	
	KA := Eltseq(KA);
	KB := Eltseq(KB);
	KL := Eltseq(KL);
	KR := Eltseq(KR);
	
 	return KA, KB, KL, KR;

 end function;


//++++++++++++++++++++++++ENCRYPTION/DECRYPTION++++++++++++++++++++++++

/**
 * Genera le sottochiavi utilizzate in ogni round
 * restituisce gli array di sottochiavi kw, ku, kl
 * i singoli elementi degli array sono sequenze
*/
function SubKeysGenerator(K)

    Kw := [];
    Ku := []; 
    Kl := [];

    if #K eq 128 then
        KA,KL := KeyScheduleA(K);

        Kw := Append(Kw, KL[1..64]);
        Kw := Append(Kw, KL[65..128]);
        Kw := Append(Kw, Rotate(KA, -111)[1..64]);
        Kw := Append(Kw, Rotate(KA, -111)[65..128]);

        Kl := Append(Kl, Rotate(KA, -30)[1..64]);
        Kl := Append(Kl, Rotate(KA, -30)[65..128]);
        Kl := Append(Kl, Rotate(KL, -77)[1..64]);
        Kl := Append(Kl, Rotate(KL, -77)[65..128]);

        //1-6
        Ku := Append(Ku, KA[1..64]);
        Ku := Append(Ku, KA[65..128]);
        Ku := Append(Ku, Rotate(KL, -15)[1..64]);
        Ku := Append(Ku, Rotate(KL, -15)[65..128]);
        Ku := Append(Ku, Rotate(KA, -15)[1..64]);
        Ku := Append(Ku, Rotate(KA, -15)[65..128]);
        //7-12
        Ku := Append(Ku, Rotate(KL, -45)[1..64]);
        Ku := Append(Ku, Rotate(KL, -45)[65..128]);
        Ku := Append(Ku, Rotate(KA, -45)[1..64]);
        Ku := Append(Ku, Rotate(KL, -60)[65..128]);
        Ku := Append(Ku, Rotate(KA, -60)[1..64]);
        Ku := Append(Ku, Rotate(KA, -60)[65..128]);
        //13-18
        Ku := Append(Ku, Rotate(KL, -94)[1..64]);
        Ku := Append(Ku, Rotate(KL, -94)[65..128]);
        Ku := Append(Ku, Rotate(KA, -94)[1..64]);
        Ku := Append(Ku, Rotate(KA, -94)[65..128]);
        Ku := Append(Ku, Rotate(KL, -111)[1..64]);
        Ku := Append(Ku, Rotate(KL, -111)[65..128]);

        return Kw,Ku,Kl;

    else
        KA,KB,KL,KR := KeyScheduleAB(K);

        Kw := Append(Kw, KL[1..64]);
        Kw := Append(Kw, KL[65..128]);
        Kw := Append(Kw, Rotate(KB, -111)[1..64]);
        Kw := Append(Kw, Rotate(KB, -111)[65..128]);

        Kl := Append(Kl, Rotate(KR, -30)[1..64]);
        Kl := Append(Kl, Rotate(KR, -30)[65..128]);
        Kl := Append(Kl, Rotate(KL, -60)[1..64]);
        Kl := Append(Kl, Rotate(KL, -60)[65..128]);
        Kl := Append(Kl, Rotate(KA, -77)[1..64]);
        Kl := Append(Kl, Rotate(KA, -77)[65..128]);

        //1-6
        Ku := Append(Ku, KB[1..64]);
        Ku := Append(Ku, KB[65..128]);
        Ku := Append(Ku, Rotate(KR, -15)[1..64]);
        Ku := Append(Ku, Rotate(KR, -15)[65..128]);
        Ku := Append(Ku, Rotate(KA, -15)[1..64]);
        Ku := Append(Ku, Rotate(KA, -15)[65..128]);
        //7-12
        Ku := Append(Ku, Rotate(KB, -30)[1..64]);
        Ku := Append(Ku, Rotate(KB, -30)[65..128]);
        Ku := Append(Ku, Rotate(KL, -45)[1..64]);
        Ku := Append(Ku, Rotate(KL, -45)[65..128]);
        Ku := Append(Ku, Rotate(KA, -45)[1..64]);
        Ku := Append(Ku, Rotate(KA, -45)[65..128]);
        //13-18
        Ku := Append(Ku, Rotate(KR, -60)[1..64]);
        Ku := Append(Ku, Rotate(KR, -60)[65..128]);
        Ku := Append(Ku, Rotate(KB, -60)[1..64]);
        Ku := Append(Ku, Rotate(KB, -60)[65..128]);
        Ku := Append(Ku, Rotate(KL, -77)[1..64]);
        Ku := Append(Ku, Rotate(KL, -77)[65..128]);
        //19-24
        Ku := Append(Ku, Rotate(KR, -94)[1..64]);
        Ku := Append(Ku, Rotate(KR, -94)[65..128]);
        Ku := Append(Ku, Rotate(KA, -94)[1..64]);
        Ku := Append(Ku, Rotate(KA, -94)[65..128]);
        Ku := Append(Ku, Rotate(KL, -111)[1..64]);
        Ku := Append(Ku, Rotate(KL, -111)[65..128]);

        return Kw,Ku,Kl;

    end if;
    
end function;

/** 
 * implementa un singolo round
 * passati i parametri per riferimento
 * Lr,Rr sono vettori di L
*/
procedure FeistelRound(~Lr,~Rr,kr)
    tmp := Lr;              // variabile d'appoggio per switch
    Lr := Rr + F(Lr, kr);   // computazione nuovo Rr
    Rr := tmp;              // switch Lr <-> Rr
end procedure;

function CamelliaWarmUp(K,P)

    //trasformo il plaintext da stringa a sequenza binaria
    P := Reverse(Intseq(StringToInteger(P,16),2));
    Fill128Bit(~P);

    //trasformo la chiave da stringa a sequenza binaria
    K := Reverse(Intseq(StringToInteger(K,16),2));

    //fill chiavi
    if #K le 128 then
        Fill128Bit(~K);
    elif #K le 192 then
        Fill192Bit(~K);
    else
        Fill256Bit(~K);
    end if;

    //generazione sottochiavi
    Kw,Ku,Kl := SubKeysGenerator(K);
    Sk:=[Kw,Ku,Kl];
    
    return P, Sk;

end function;

function CamelliaMixingLayer(P,Sk)
    //Prewhitening
    P:= Q!P;
    Kw:=Sk[1]; Ku:=Sk[2]; Kl:=Sk[3];
    PXored := P + Q!(Kw[1] cat Kw[2]);

    PSeq := Eltseq(PXored);
    Lr := L!(PSeq[1..64]);
    Rr := L!(PSeq[65..128]);

    //encryption round 1-6
    for i in [1..6] do
        FeistelRound(~Lr,~Rr, L!(Ku[i]));
    end for;

    Lr := FL(Lr,Kl[1]);
    Rr := FL_1(Rr,Kl[2]);

    //encryption round 7-12
    for i in [7..12] do
        FeistelRound(~Lr,~Rr, L!(Ku[i]));
    end for;

    Lr := FL(Lr,Kl[3]);
    Rr := FL_1(Rr,Kl[4]);

    //encryption round 13-18
    for i in [13..18] do
        FeistelRound(~Lr,~Rr, L!(Ku[i]));
    end for;

    //verifica lunghezza chiave e aggiungi round nel caso 192/256
    if #Ku ge 19 then   
        Lr := FL(Lr,Kl[5]);
        Rr := FL_1(Rr,Kl[6]);

        //encryption round 19-24
        for i in [19..24] do
            FeistelRound(~Lr,~Rr, L!(Ku[i]));
        end for;
    end if;


    //postwhitening
    LR := Q!(Eltseq(Rr) cat Eltseq(Lr));         // prima dello XOR finale inverto spezzoni
    C := LR + Q!(Kw[3] cat Kw[4]);  


    C:=IntegerToString(ConvertBinInt(Eltseq(C)),16);

    if #C le 32 then
        for i in [1..(32-(#C))] do
            C:="0" cat C;
        end for;
    end if;
    
    return C;
  
end function;

function CamelliaEncryption(K,P)

    P,Sk:=CamelliaWarmUp(K,P);
    C:=CamelliaMixingLayer(P,Sk);

    return C;
end function;
               
function CamelliaDecryption(K,C)
    C,Sk:=CamelliaWarmUp(K,C);

    KwTmp := Sk[1][1];
    Sk[1][1] := Sk[1][3];
    Sk[1][3] := KwTmp;
    KwTmp := Sk[1][2];
    Sk[1][2] := Sk[1][4];
    Sk[1][4] := KwTmp;

    SK:=[Sk[1],Reverse(Sk[2]),Reverse(Sk[3])];

    P:=CamelliaMixingLayer(C,SK);

    return P;
    

end function;